generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId              Int                   @id @default(autoincrement())
  email               String
  passwordHash        String
  firstName           String?
  lastName            String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  role                String?
  isVerified          Int?
  project             String                @default("document-parser")
  favorites           Favorite[]
  recipes             Recipe[]
  reviews             Review[]
  conversations       conversations[]
  files               files[]
  messages            messages[]
  processed_documents processed_documents[]
  userOtps            userOtp[]

  @@unique([email, project])
}

model userOtp {
  id                  Int      @id @default(autoincrement())
  otp                 String   @unique
  isUsed              Int
  generatedTimestamp  DateTime
  expirationTimestamp DateTime
  userId              Int
  user                User     @relation(fields: [userId], references: [userId])
}

model NutritionInfo {
  nutritionId          Int                   @id @default(autoincrement())
  calorie              String?
  fat                  String?
  carbs                String?
  protein              String?
  sugar                String?
  fiber                String?
  recipeNutritionInfos RecipeNutritionInfo[]
}

model Recipe {
  recipeId       Int                   @id @default(autoincrement())
  title          String
  description    String?
  cookingTime    Int?
  servingSize    Int?
  categoryId     Int
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  userId         Int?
  approveStatus  String
  approvedDate   DateTime?
  difficulty     Int?
  isSavedAsDraft Int
  prepTime       Int?
  favorites      Favorite[]
  images         Image[]
  user           User?                 @relation(fields: [userId], references: [userId])
  ingredients    RecipeIngredient[]
  instructions   RecipeInstructions[]
  nutritionInfo  RecipeNutritionInfo[]
  tags           RecipeTag[]
  reviews        Review[]
}

model Instructions {
  instructionId      Int                  @id @default(autoincrement())
  description        String
  recipeInstructions RecipeInstructions[]
}

model Ingredient {
  ingredientId      Int                @id @default(autoincrement())
  name              String             @unique
  description       String?
  recipeIngredients RecipeIngredient[]
}

model RecipeIngredient {
  recipeId     Int
  ingredientId Int
  quantity     String
  ingredient   Ingredient @relation(fields: [ingredientId], references: [ingredientId])
  recipe       Recipe     @relation(fields: [recipeId], references: [recipeId])

  @@id([recipeId, ingredientId])
}

model RecipeNutritionInfo {
  recipeId      Int
  nutritionId   Int
  nutritionInfo NutritionInfo @relation(fields: [nutritionId], references: [nutritionId])
  recipe        Recipe        @relation(fields: [recipeId], references: [recipeId])

  @@id([recipeId, nutritionId])
}

model RecipeInstructions {
  recipeId      Int
  instructionId Int
  instruction   Instructions @relation(fields: [instructionId], references: [instructionId])
  recipe        Recipe       @relation(fields: [recipeId], references: [recipeId])

  @@id([recipeId, instructionId])
}

model Tag {
  tagId   Int         @id @default(autoincrement())
  name    String      @unique
  recipes RecipeTag[]
}

model RecipeTag {
  recipeId Int
  tagId    Int
  recipe   Recipe @relation(fields: [recipeId], references: [recipeId])
  tag      Tag    @relation(fields: [tagId], references: [tagId])

  @@id([recipeId, tagId])
}

model Review {
  reviewId   Int      @id @default(autoincrement())
  rating     Int
  reviewText String?
  createdAt  DateTime @default(now())
  userId     Int
  recipeId   Int
  recipe     Recipe   @relation(fields: [recipeId], references: [recipeId])
  user       User     @relation(fields: [userId], references: [userId])
}

model Favorite {
  userId      Int
  recipeId    Int
  isFavourite Int?
  recipe      Recipe @relation(fields: [recipeId], references: [recipeId])
  user        User   @relation(fields: [userId], references: [userId])

  @@id([userId, recipeId])
}

model Image {
  imageId     Int      @id @default(autoincrement())
  imageUrl    String
  description String?
  createdAt   DateTime @default(now())
  recipeId    Int?
  recipe      Recipe?  @relation(fields: [recipeId], references: [recipeId])
}

model conversations {
  id                  String               @id
  title               String
  fileId              String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime
  userId              Int?
  documentId          String?
  processed_documents processed_documents? @relation(fields: [documentId], references: [id])
  files               files?               @relation(fields: [fileId], references: [id])
  User                User?                @relation(fields: [userId], references: [userId])
  messages            messages[]
}

model files {
  id             String          @id
  url            String          @unique
  fileName       String
  fileType       String
  pageCount      Int?
  size           Int?
  sourceUrl      String?
  sourceFileName String?
  uploadedAt     DateTime        @default(now())
  updatedAt      DateTime
  userId         Int?
  conversations  conversations[]
  User           User?           @relation(fields: [userId], references: [userId])
}

model messages {
  id             String        @id
  conversationId String
  role           String
  content        String
  createdAt      DateTime      @default(now())
  userId         Int?
  conversations  conversations @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  User           User?         @relation(fields: [userId], references: [userId])
}

model processed_documents {
  id             String          @id
  fileName       String
  fileUrl        String
  chunkCount     Int
  pageCount      Int?
  sourceUrl      String?
  sourceFileName String?
  processedAt    DateTime        @default(now())
  userId         Int?
  conversations  conversations[]
  User           User?           @relation(fields: [userId], references: [userId])
}
